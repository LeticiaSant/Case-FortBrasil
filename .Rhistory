base_modmult_fim_vif = base_vif %>% dplyr::select(resposta,colnames(base_vif)[round(sum_test_vif$coefficients[,4],6)<0.05])
View(base_modmult_fim_vif)
sum_test_vif
select = subset(base_modmult_fim_vif,select = c(nu_dias_atraso,
valor_creliq,
qtd_parcelamento_12m,
qtd_extratos,
qtd_fx1_geral,
qtd_cpc_6m,
resposta))
library(bestglm)
bestmod = bestglm(Xy = select,family = binomial,IC = "AIC",
method = "exhaustive", TopModels = 10, RequireFullEnumerationQ = T)
# tabela dos modelos testados
bestmod$BestModels
mod_mult_bestglm = glm(formula = resposta ~ .,data = base_modmult_fim_vif,family = binomial(link="logit"))
sum_modmult_bestglm = summary(mod_mult_bestglm)
hl = hoslem.test(mod_mult_bestglm$y,fitted(mod_mult_bestglm), g = 10)
hl
round(cbind(hl$observed,hl$expected),2)
curva_roc = roc.curve(base_modmult_fim_vif$resposta,
mod_mult_bestglm$fitted.values,
ylab = "Taxa de verdadeiros positivos",
xlab = "Taxa de falsos positivos")
curva_roc$auc
pdata <- predict(mod_mult_bestglm, newdata = base_modmult_fim_vif, type = "response")
confusionMatrix(table(data = as.numeric(pdata>0.5), reference = base_modmult_fim_vif$resposta),positive = '1')
confusionMatrix(table(data = as.numeric(pdata>0.45), reference = base_modmult_fim_vif$resposta),positive = '1')
confusionMatrix(table(data = as.numeric(pdata>0.49), reference = base_modmult_fim_vif$resposta),positive = '1')
confusionMatrix(table(data = as.numeric(pdata>0.5), reference = base_modmult_fim_vif$resposta),positive = '1')
confusionMatrix(table(data = as.numeric(pdata>0.6), reference = base_modmult_fim_vif$resposta),positive = '1')
confusionMatrix(table(data = as.numeric(pdata>0.7), reference = base_modmult_fim_vif$resposta),positive = '1')
sum_modmult_bestglm
hl = hoslem.test(mod_mult_bestglm$y,fitted(mod_mult_bestglm), g = 6)
hl
round(cbind(hl$observed,hl$expected),2)
hl
?hoslem.test
hl = ?hoslem.test(mod_mult_bestglm$y,fitted(mod_mult_bestglm), g = 15)
hl = hoslem.test(mod_mult_bestglm$y,fitted(mod_mult_bestglm), g = 15)
hl
round(cbind(hl$observed,hl$expected),2)
curva_roc = roc.curve(base_modmult_fim_vif$resposta,
mod_mult_bestglm$fitted.values,
ylab = "Taxa de verdadeiros positivos",
xlab = "Taxa de falsos positivos")
curva_roc$auc
pdata <- predict(mod_mult_bestglm, newdata = base_modmult_fim_vif, type = "response")
confusionMatrix(table(data = as.numeric(pdata>0.7), reference = base_modmult_fim_vif$resposta),positive = '1')
table(as.numeric(pdata>0.5))
pdata <- ?predict(mod_mult_bestglm, newdata = base_modmult_fim_vif, type = "response")
?predict
pdata <- predict(mod_mult_bestglm, newdata = base_modmult_fim_vif, type = 'prob')
confusionMatrix(table(data = as.numeric(pdata>0.7), reference = base_modmult_fim_vif$resposta),positive = '1')
confusionMatrix(table(data = as.numeric(pdata>0.5), reference = base_modmult_fim_vif$resposta),positive = '1')
pdata <- predict(mod_mult_bestglm, newdata = base_modmult_fim_vif, type = "response")
confusionMatrix(table(data = as.numeric(pdata>0.5), reference = base_modmult_fim_vif$resposta),positive = '1')
?across
View(baseCompQ2_)
## filtrando periodo do modelo #####
base_modelo = baseCompQ2_ %>% dplyr::filter(faixa_atraso == "180-240 dias") %>%
select(resposta,nu_dias_atraso:divida_atual,qtd_parcelamento_3m:qtd_acionamento_6m, -c(id_conta,dt_acordo,ano_mes, faixa_atraso))
summary(base_modelo$nu_dias_atraso)
summary(base_modelo)
summary(base_modelo) %>% View()
## filtrando periodo do modelo #####
base_modelo = baseCompQ2_ %>% dplyr::filter(faixa_atraso == "180-240 dias") %>%
select(resposta,nu_dias_atraso:divida_atual,qtd_parcelamento_3m:qtd_acionamento_6m, -c(id_conta,dt_acordo,ano_mes, faixa_atraso)) %>%
dplyr::mutate_all(as.factor())
## filtrando periodo do modelo #####
base_modelo = baseCompQ2_ %>% dplyr::filter(faixa_atraso == "180-240 dias") %>%
select(resposta,nu_dias_atraso:divida_atual,qtd_parcelamento_3m:qtd_acionamento_6m, -c(id_conta,dt_acordo,ano_mes, faixa_atraso)) %>%
dplyr::mutate_all(as.factor)
srt(base_modelo)
str(base_modelo)
### analisando composicao da variavel resposta ####
table(base_modelo$resposta)
### percentual de acordos realizados ###
sum(base_modelo$resposta == 1)/nrow(base_modelo)
base_modelo$resposta = as.factor(base_modelo$resposta)
base_modelo_rmna = na.omit(base_modelo)
dim(base_modelo_rmna)
### percentual de acordos realizados depois de remover dados omissos ###
sum(base_modelo_rmna$resposta == 1)/nrow(base_modelo_rmna)
base_modelo_rmna_amostra_1 = base_modelo_rmna %>% dplyr::filter(resposta == 1)
base_modelo_rmna_amostra_0 = base_modelo_rmna %>% dplyr::filter(resposta == 0)
base_modelo_rmna_amostra = rbind(base_modelo_rmna_amostra_1,
base_modelo_rmna_amostra_0)
base_modelo_rmna_amostra$resposta = as.factor(base_modelo_rmna_amostra$resposta)
names_colunas = colnames(base_modelo_rmna_amostra)
for (i in 2:length(names_colunas)) {
assign(paste0("mod_",names_colunas[i]), glm(formula = resposta ~ base_modelo_rmna_amostra[,i],data = base_modelo_rmna_amostra ,family = binomial(link="logit")))
#assign(paste0("mod_",names_colunas[i]), lm(formula = as.numeric(resposta) ~ base_modelo_rmna_amostra[,i],data = base_modelo_rmna_amostra))
a = summary(get(paste0("mod_",names_colunas[i])))
base_testes =  data_frame(`Variáveis` = names_colunas[i],
Estimativa = round(a$coefficients[2,1],6),
`Erro-padrão` = round(a$coefficients[2,2],6),
`Estatística t` = round(a$coefficients[2,3],6),
`Valor-p` = round(a$coefficients[2,4],6),
Significante = ifelse(round(a$coefficients[2,4],6)>0.05,"Não","Sim"))
if(i == 2){
base_testes_fim = base_testes
}else{
base_testes_fim = rbind(base_testes_fim,base_testes)
}
}
dadosQ21 = read.table("Bases/Q21.txt",header = T)
colnames(dadosQ21) =  tolower(colnames(dadosQ21))
dadosQ21$dt_acordo = as.Date(dadosQ21$dt_acordo)
dadosQ22 = read.table("Bases/Q22.txt",header = T)
colnames(dadosQ22) =  tolower(colnames(dadosQ22))
dadosQ22$dt_acordo = as.Date(dadosQ22$dt_acordo)
dadosQ23 = read.table("Bases/Q23.txt",header = T)
colnames(dadosQ23) =  tolower(colnames(dadosQ23))
dadosQ23$dt_acordo = as.Date(dadosQ23$dt_acordo)
dadosQ24 = read.table("Bases/Q24.txt",header = T,sep = "\t")
colnames(dadosQ24) =  tolower(colnames(dadosQ24))
dadosQ24$dt_acordo = as.Date(dadosQ24$dt_acordo)
dadosQ25 = read.table("Bases/Q25.txt",header = T)
colnames(dadosQ25) =  tolower(colnames(dadosQ25))
dadosQ25$dt_acordo = as.Date(dadosQ25$dt_acordo)
baseCompQ2 = dadosQ21 %>% left_join(dadosQ22) %>%
left_join(dadosQ23) %>%
left_join(dadosQ24) %>%
left_join(dadosQ25)
baseCompQ2_ = baseCompQ2 %>% dplyr::mutate(ano_mes = yearmonth(dt_acordo),
faixa_atraso = case_when((nu_dias_atraso >=180 & nu_dias_atraso <= 240) ~ "180-240 dias",
(nu_dias_atraso >240 & nu_dias_atraso <= 300) ~ "240-300 dias",
(nu_dias_atraso >300 & nu_dias_atraso <= 360) ~ "300-360 dias",
(nu_dias_atraso >360 & nu_dias_atraso <= 420) ~ "360-420 dias",
(nu_dias_atraso >420 & nu_dias_atraso <= 480) ~ "420-480 dias",
(nu_dias_atraso >480) ~ "480 dias-mais"))
## filtrando periodo do modelo #####
base_modelo = baseCompQ2_ %>% dplyr::filter(faixa_atraso == "180-240 dias") %>%
select(resposta,nu_dias_atraso:divida_atual,qtd_parcelamento_3m:qtd_acionamento_6m, -c(id_conta,dt_acordo,ano_mes, faixa_atraso))
### analisando composicao da variavel resposta ####
table(base_modelo$resposta)
### percentual de acordos realizados ###
sum(base_modelo$resposta == 1)/nrow(base_modelo)
base_modelo$resposta = as.factor(base_modelo$resposta)
base_modelo_rmna = na.omit(base_modelo)
dim(base_modelo_rmna)
### percentual de acordos realizados depois de remover dados omissos ###
sum(base_modelo_rmna$resposta == 1)/nrow(base_modelo_rmna)
base_modelo_rmna_amostra_1 = base_modelo_rmna %>% dplyr::filter(resposta == 1)
base_modelo_rmna_amostra_0 = base_modelo_rmna %>% dplyr::filter(resposta == 0)
set.seed(404020)
base_modelo_rmna_amostra_0_ = base_modelo_rmna_amostra_0[sample(1:nrow(base_modelo_rmna_amostra_0),nrow(base_modelo_rmna_amostra_1)/2),]
base_modelo_rmna_amostra = rbind(base_modelo_rmna_amostra_1,
base_modelo_rmna_amostra_0)
base_modelo_rmna_amostra$resposta = as.factor(base_modelo_rmna_amostra$resposta)
names_colunas = colnames(base_modelo_rmna_amostra)
for (i in 2:length(names_colunas)) {
assign(paste0("mod_",names_colunas[i]), glm(formula = resposta ~ base_modelo_rmna_amostra[,i],data = base_modelo_rmna_amostra ,family = binomial(link="logit")))
#assign(paste0("mod_",names_colunas[i]), lm(formula = as.numeric(resposta) ~ base_modelo_rmna_amostra[,i],data = base_modelo_rmna_amostra))
a = summary(get(paste0("mod_",names_colunas[i])))
base_testes =  data_frame(`Variáveis` = names_colunas[i],
Estimativa = round(a$coefficients[2,1],6),
`Erro-padrão` = round(a$coefficients[2,2],6),
`Estatística t` = round(a$coefficients[2,3],6),
`Valor-p` = round(a$coefficients[2,4],6),
Significante = ifelse(round(a$coefficients[2,4],6)>0.05,"Não","Sim"))
if(i == 2){
base_testes_fim = base_testes
}else{
base_testes_fim = rbind(base_testes_fim,base_testes)
}
}
variaveis_selec = base_testes_fim %>% dplyr::filter(Significante == "Sim") %>% dplyr::select(`Variáveis`)
base_modelo_mult = base_modelo_rmna_amostra %>% select(resposta,as.vector(variaveis_selec$Variáveis))
View(base_modelo_mult)
variaveis_selec
View(base_modelo_mult)
mod_mult = glm(formula = resposta ~ .,data = base_modelo_mult %>% dplyr::mutate_all(as.factor),family = binomial(link="logit"))
sum_modmult = summary(mod_mult)
base_modelo_rmna_amostra_0_ = base_modelo_rmna_amostra_0[sample(1:nrow(base_modelo_rmna_amostra_0),nrow(base_modelo_rmna_amostra_1)),]
base_modelo_rmna_amostra = rbind(base_modelo_rmna_amostra_1,
base_modelo_rmna_amostra_0_)
base_modelo_rmna_amostra$resposta = as.factor(base_modelo_rmna_amostra$resposta)
names_colunas = colnames(base_modelo_rmna_amostra)
for (i in 2:length(names_colunas)) {
assign(paste0("mod_",names_colunas[i]), glm(formula = resposta ~ base_modelo_rmna_amostra[,i],data = base_modelo_rmna_amostra ,family = binomial(link="logit")))
#assign(paste0("mod_",names_colunas[i]), lm(formula = as.numeric(resposta) ~ base_modelo_rmna_amostra[,i],data = base_modelo_rmna_amostra))
a = summary(get(paste0("mod_",names_colunas[i])))
base_testes =  data_frame(`Variáveis` = names_colunas[i],
Estimativa = round(a$coefficients[2,1],6),
`Erro-padrão` = round(a$coefficients[2,2],6),
`Estatística t` = round(a$coefficients[2,3],6),
`Valor-p` = round(a$coefficients[2,4],6),
Significante = ifelse(round(a$coefficients[2,4],6)>0.05,"Não","Sim"))
if(i == 2){
base_testes_fim = base_testes
}else{
base_testes_fim = rbind(base_testes_fim,base_testes)
}
}
variaveis_selec = base_testes_fim %>% dplyr::filter(Significante == "Sim") %>% dplyr::select(`Variáveis`)
base_modelo_mult = base_modelo_rmna_amostra %>% select(resposta,as.vector(variaveis_selec$Variáveis))
mod_mult = glm(formula = resposta ~ .,data = base_modelo_mult,family = binomial(link="logit"))
sum_modmult = summary(mod_mult)
sort(vif(mod_mult))
attributes(alias(mod_mult)$Complete)$dimnames[[1]]
## filtrando periodo do modelo #####
base_modelo = baseCompQ2_ %>% #dplyr::filter(faixa_atraso == "180-240 dias") %>%
select(resposta,nu_dias_atraso:divida_atual,qtd_parcelamento_3m:qtd_acionamento_6m, -c(id_conta,dt_acordo,ano_mes, faixa_atraso))
### analisando composicao da variavel resposta ####
table(base_modelo$resposta)
### percentual de acordos realizados ###
sum(base_modelo$resposta == 1)/nrow(base_modelo)
base_modelo$resposta = as.factor(base_modelo$resposta)
base_modelo_rmna = na.omit(base_modelo)
dim(base_modelo_rmna)
### percentual de acordos realizados depois de remover dados omissos ###
sum(base_modelo_rmna$resposta == 1)/nrow(base_modelo_rmna)
base_modelo_rmna_amostra_1 = base_modelo_rmna %>% dplyr::filter(resposta == 1)
base_modelo_rmna_amostra_0 = base_modelo_rmna %>% dplyr::filter(resposta == 0)
set.seed(404020)
base_modelo_rmna_amostra_0_ = base_modelo_rmna_amostra_0[sample(1:nrow(base_modelo_rmna_amostra_0),nrow(base_modelo_rmna_amostra_1)),]
base_modelo_rmna_amostra = rbind(base_modelo_rmna_amostra_1,
base_modelo_rmna_amostra_0_)
base_modelo_rmna_amostra$resposta = as.factor(base_modelo_rmna_amostra$resposta)
names_colunas = colnames(base_modelo_rmna_amostra)
for (i in 2:length(names_colunas)) {
assign(paste0("mod_",names_colunas[i]), glm(formula = resposta ~ base_modelo_rmna_amostra[,i],data = base_modelo_rmna_amostra ,family = binomial(link="logit")))
#assign(paste0("mod_",names_colunas[i]), lm(formula = as.numeric(resposta) ~ base_modelo_rmna_amostra[,i],data = base_modelo_rmna_amostra))
a = summary(get(paste0("mod_",names_colunas[i])))
base_testes =  data_frame(`Variáveis` = names_colunas[i],
Estimativa = round(a$coefficients[2,1],6),
`Erro-padrão` = round(a$coefficients[2,2],6),
`Estatística t` = round(a$coefficients[2,3],6),
`Valor-p` = round(a$coefficients[2,4],6),
Significante = ifelse(round(a$coefficients[2,4],6)>0.05,"Não","Sim"))
if(i == 2){
base_testes_fim = base_testes
}else{
base_testes_fim = rbind(base_testes_fim,base_testes)
}
}
variaveis_selec = base_testes_fim %>% dplyr::filter(Significante == "Sim") %>% dplyr::select(`Variáveis`)
base_modelo_mult = base_modelo_rmna_amostra %>% select(resposta,as.vector(variaveis_selec$Variáveis))
mod_mult = glm(formula = resposta ~ .,data = base_modelo_mult,family = binomial(link="logit"))
sum_modmult = summary(mod_mult)
attributes(alias(mod_mult)$Complete)$dimnames[[1]]
sort(vif(mod_mult))
mod_mult = glm(formula = resposta ~ .,data = base_modelo_mult[,!(colnames(base_modelo_mult) %in% c("qtd_fx2_geral")],family = binomial(link="logit"))
mod_mult = glm(formula = resposta ~ .,data = base_modelo_mult[,!(colnames(base_modelo_mult) %in% c("qtd_fx2_geral"))],family = binomial(link="logit"))
sum_modmult = summary(mod_mult)
sort(vif(mod_mult))
test_vif = glm(formula = resposta ~ .,data = base_modelo_mult[,!(colnames(base_modelo_mult) %in% c("qtd_extratos")],family = binomial(link="logit"))
test_vif = glm(formula = resposta ~ .,data = base_modelo_mult[,!(colnames(base_modelo_mult) %in% c("qtd_extratos"))],family = binomial(link="logit"))
sum_test_vif = summary(test_vif)
sort(vif(test_vif))
test_vif = glm(formula = resposta ~ .,data = base_modelo_mult[,!(colnames(base_modelo_mult) %in% c("qtd_extratos",
"divida_atual"))],family = binomial(link="logit"))
sum_test_vif = summary(test_vif)
sort(vif(test_vif))
test_vif = glm(formula = resposta ~ .,data = base_modelo_mult[,!(colnames(base_modelo_mult) %in% c("qtd_extratos",
"divida_atual",
"qtd_parcelamento_6m"))],family = binomial(link="logit"))
sum_test_vif = summary(test_vif)
sort(vif(test_vif))
test_vif = glm(formula = resposta ~ .,data = base_modelo_mult[,!(colnames(base_modelo_mult) %in% c("qtd_extratos",
"divida_atual",
"qtd_parcelamento_6m",
"qtd_fx1_6m"))],family = binomial(link="logit"))
sum_test_vif = summary(test_vif)
sort(vif(test_vif))
base_vif = base_modelo_mult[,!(colnames(base_modelo_mult) %in% c("qtd_extratos",
"divida_atual",
"qtd_parcelamento_6m",
"qtd_fx1_6m"))]
base_modmult_fim_vif = base_vif %>% dplyr::select(resposta,colnames(base_vif)[round(sum_test_vif$coefficients[,4],6)<0.05])
View(base_modmult_fim_vif)
sum_test_vif
select = subset(base_modmult_fim_vif,select = c(nu_dias_atraso,
valor_creliq,
qtd_parcelamento_12m,
qtd_fx0_geral,
qtd_fx1_geral,
qtd_cpc_1m,
qtd_cpc_6m,
qtd_acionamento_3m,
resposta))
library(bestglm)
bestmod = bestglm(Xy = select,family = binomial,IC = "AIC",
method = "exhaustive", TopModels = 10, RequireFullEnumerationQ = T)
# tabela dos modelos testados
bestmod$BestModels
hl = hoslem.test(mod_mult_bestglm$y,fitted(mod_mult_bestglm), g = 15)
round(cbind(hl$observed,hl$expected),2)
mod_mult_bestglm = glm(formula = resposta ~ .,data = base_modmult_fim_vif,family = binomial(link="logit"))
sum_modmult_bestglm = summary(mod_mult_bestglm)
hl = hoslem.test(mod_mult_bestglm$y,fitted(mod_mult_bestglm), g = 15)
hl
round(cbind(hl$observed,hl$expected),2)
curva_roc = roc.curve(base_modmult_fim_vif$resposta,
mod_mult_bestglm$fitted.values,
ylab = "Taxa de verdadeiros positivos",
xlab = "Taxa de falsos positivos")
curva_roc$auc
pdata <- predict(mod_mult_bestglm, newdata = base_modmult_fim_vif, type = "response")
confusionMatrix(table(data = as.numeric(pdata>0.5), reference = base_modmult_fim_vif$resposta),positive = '1')
sample(1:nrow(base_modelo_rmna_amostra_0_),nrow(base_modelo_rmna_amostra_1)*0.7)
base_modelo_rmna_amostra_0[sample(1:nrow(base_modelo_rmna_amostra_0_),nrow(base_modelo_rmna_amostra_1)*0.7),]
dim(base_modelo_rmna_amostra_0[sample(1:nrow(base_modelo_rmna_amostra_0_),nrow(base_modelo_rmna_amostra_1)*0.7),])
nrow(base_modelo_rmna_amostra_0_)
base_modelo_rmna_amostra_train = rbind(base_modelo_rmna_amostra_1[sample(1:nrow(base_modelo_rmna_amostra_1),nrow(base_modelo_rmna_amostra_1)*0.7),],
base_modelo_rmna_amostra_0[sample(1:nrow(base_modelo_rmna_amostra_0_),nrow(base_modelo_rmna_amostra_1)*0.7),])
dim(base_modelo_rmna_amostra_train)
dim(base_modelo_rmna_amostra)
2870/4102
sample(1:nrow(base_modelo_rmna_amostra_1),nrow(base_modelo_rmna_amostra_1)*0.7)
!(sample(1:nrow(base_modelo_rmna_amostra_1),nrow(base_modelo_rmna_amostra_1)*0.7))
seq(1:nrow(base_modelo_rmna_amostra_1,1))
seq(1:nrow(base_modelo_rmna_amostra_1),1)
nrow(base_modelo_rmna_amostra_1)
1:nrow(base_modelo_rmna_amostra_1)
c(1:nrow(base_modelo_rmna_amostra_1)) != (sample(1:nrow(base_modelo_rmna_amostra_1),nrow(base_modelo_rmna_amostra_1)*0.7))
set.seed(404020)
base_modelo_rmna_amostra_train = rbind(base_modelo_rmna_amostra_1[sample(1:nrow(base_modelo_rmna_amostra_1),nrow(base_modelo_rmna_amostra_1)*0.7),],
base_modelo_rmna_amostra_0_[sample(1:nrow(base_modelo_rmna_amostra_0_),nrow(base_modelo_rmna_amostra_1)*0.7),])
base_modelo_rmna_amostra_test = rbind(base_modelo_rmna_amostra_1[c(1:nrow(base_modelo_rmna_amostra_1)) != (sample(1:nrow(base_modelo_rmna_amostra_1),nrow(base_modelo_rmna_amostra_1)*0.7)),],
base_modelo_rmna_amostra_0_[c(1:nrow(base_modelo_rmna_amostra_0_)) != (sample(1:nrow(base_modelo_rmna_amostra_0_),nrow(base_modelo_rmna_amostra_1)*0.7)),])
c(1:nrow(base_modelo_rmna_amostra_0_)) != (sample(1:nrow(base_modelo_rmna_amostra_0_),nrow(base_modelo_rmna_amostra_1)*0.7))
table(c(1:nrow(base_modelo_rmna_amostra_0_)) != (sample(1:nrow(base_modelo_rmna_amostra_0_),nrow(base_modelo_rmna_amostra_1)*0.7)))
(sample(1:nrow(base_modelo_rmna_amostra_0_),nrow(base_modelo_rmna_amostra_1)*0.7)
(sample(1:nrow(base_modelo_rmna_amostra_0_),nrow(base_modelo_rmna_amostra_1)*0.7))
nrow(base_modelo_rmna_amostra_0_))
nrow(base_modelo_rmna_amostra_0_)
table(!(c(1:nrow(base_modelo_rmna_amostra_0_)) %in% (sample(1:nrow(base_modelo_rmna_amostra_0_),nrow(base_modelo_rmna_amostra_1)*0.7))))
set.seed(404020)
base_modelo_rmna_amostra_train = rbind(base_modelo_rmna_amostra_1[sample(1:nrow(base_modelo_rmna_amostra_1),nrow(base_modelo_rmna_amostra_1)*0.7),],
base_modelo_rmna_amostra_0_[sample(1:nrow(base_modelo_rmna_amostra_0_),nrow(base_modelo_rmna_amostra_0_)*0.7),])
base_modelo_rmna_amostra_test = rbind(base_modelo_rmna_amostra_1[!(c(1:nrow(base_modelo_rmna_amostra_1)) %in% (sample(1:nrow(base_modelo_rmna_amostra_1),nrow(base_modelo_rmna_amostra_1)*0.7))),],
base_modelo_rmna_amostra_0_[!(c(1:nrow(base_modelo_rmna_amostra_0_)) %in% (sample(1:nrow(base_modelo_rmna_amostra_0_),nrow(base_modelo_rmna_amostra_0_)*0.7))),])
dim(base_modelo_rmna_amostra_train)
dim(base_modelo_rmna_amostra)
dim(base_modelo_rmna_amostra_test)
2870/4102
1232/4102
base_modelo_rmna_amostra_train$resposta = as.factor(base_modelo_rmna_amostra_train$resposta)
names_colunas = colnames(base_modelo_rmna_amostra_train)
for (i in 2:length(names_colunas)) {
assign(paste0("mod_",names_colunas[i]), glm(formula = resposta ~ base_modelo_rmna_amostra_train[,i],data = base_modelo_rmna_amostra_train ,family = binomial(link="logit")))
#assign(paste0("mod_",names_colunas[i]), lm(formula = as.numeric(resposta) ~ base_modelo_rmna_amostra_train[,i],data = base_modelo_rmna_amostra_train))
a = summary(get(paste0("mod_",names_colunas[i])))
base_testes =  data_frame(`Variáveis` = names_colunas[i],
Estimativa = round(a$coefficients[2,1],6),
`Erro-padrão` = round(a$coefficients[2,2],6),
`Estatística t` = round(a$coefficients[2,3],6),
`Valor-p` = round(a$coefficients[2,4],6),
Significante = ifelse(round(a$coefficients[2,4],6)>0.05,"Não","Sim"))
if(i == 2){
base_testes_fim = base_testes
}else{
base_testes_fim = rbind(base_testes_fim,base_testes)
}
}
variaveis_selec = base_testes_fim %>% dplyr::filter(Significante == "Sim") %>% dplyr::select(`Variáveis`)
base_modelo_mult = base_modelo_rmna_amostra_train %>% select(resposta,as.vector(variaveis_selec$Variáveis))
mod_mult = glm(formula = resposta ~ .,data = base_modelo_mult,family = binomial(link="logit"))
sum_modmult = summary(mod_mult)
attributes(alias(mod_mult)$Complete)$dimnames[[1]]
sort(vif(mod_mult))
test_vif = glm(formula = resposta ~ .,data = base_modelo_mult[,!(colnames(base_modelo_mult) %in% c("divida_atual")],family = binomial(link="logit"))
sort(vif(test_vif))
test_vif = glm(formula = resposta ~ .,data = base_modelo_mult[,!(colnames(base_modelo_mult) %in% c("divida_atual"))],family = binomial(link="logit"))
sum_test_vif = summary(test_vif)
sort(vif(test_vif))
test_vif = glm(formula = resposta ~ .,data = base_modelo_mult[,!(colnames(base_modelo_mult) %in% c("divida_atual",
"qtd_parcelamento_6m"))],family = binomial(link="logit"))
sum_test_vif = summary(test_vif)
sort(vif(test_vif))
test_vif = glm(formula = resposta ~ .,data = base_modelo_mult[,!(colnames(base_modelo_mult) %in% c("divida_atual",
"qtd_parcelamento_6m",
"qtd_fx1_6m"))],family = binomial(link="logit"))
sum_test_vif = summary(test_vif)
sort(vif(test_vif))
base_vif = base_modelo_mult[,!(colnames(base_modelo_mult) %in% c("divida_atual",
"qtd_parcelamento_6m",
"qtd_fx1_6m"))]
sum_test_vif
base_modmult_fim_vif = base_vif %>% dplyr::select(resposta,colnames(base_vif)[round(sum_test_vif$coefficients[,4],6)<0.05])
select = subset(base_modmult_fim_vif,select = c(nu_dias_atraso,
valor_creliq,
qtd_parcelamento_12m,
qtd_fx1_geral,
qtd_cpc_1m,
qtd_cpc_6m,
resposta))
library(bestglm)
bestmod = bestglm(Xy = select,family = binomial,IC = "AIC",
method = "exhaustive", TopModels = 10, RequireFullEnumerationQ = T)
# tabela dos modelos testados
bestmod$BestModels
mod_mult_bestglm = glm(formula = resposta ~ .,data = base_modmult_fim_vif,family = binomial(link="logit"))
sum_modmult_bestglm = summary(mod_mult_bestglm)
hl = hoslem.test(mod_mult_bestglm$y,fitted(mod_mult_bestglm), g = 15)
round(cbind(hl$observed,hl$expected),2)
hl
curva_roc = roc.curve(base_modmult_fim_vif$resposta,
mod_mult_bestglm$fitted.values,
ylab = "Taxa de verdadeiros positivos",
xlab = "Taxa de falsos positivos")
curva_roc$auc
pdata <- predict(mod_mult_bestglm, newdata = base_modmult_fim_vif, type = "response")
confusionMatrix(table(data = as.numeric(pdata>0.5), reference = base_modmult_fim_vif$resposta),positive = '1')
pdata_train <- predict(mod_mult_bestglm, newdata = base_modmult_fim_vif, type = "response")
confusionMatrix(table(data = as.numeric(pdata_train>0.5), reference = base_modmult_fim_vif$resposta),positive = '1')
mod_mult_bestglm$model
test = base_modelo_rmna_amostra_test %>% dplyr::select(colnames(mod_mult_bestglm$model))
test[,-1]
View(base_modmult_fim_vif)
pdata_train <- predict(mod_mult_bestglm, newdata = base_modmult_fim_vif[,-1], type = "response")
confusionMatrix(table(data = as.numeric(pdata_train>0.5), reference = base_modmult_fim_vif$resposta),positive = '1')
pdata_test <- predict(mod_mult_bestglm, newdata = test[,-1], type = "response")
confusionMatrix(table(data = as.numeric(pdata_test>0.5), reference = test$resposta),positive = '1')
confusionMatrix(table(data = as.numeric(pdata_train>0.5), reference = base_modmult_fim_vif$resposta),positive = '1')
ks.test(pdata_train,pdata_test)
sum_modmult_bestglm
### percentual de acordos realizados ###
sum(base_modelo$resposta == 1)/nrow(base_modelo)
View(base_testes_fim)
a
for (i in 2:length(names_colunas)) {
assign(paste0("mod_",names_colunas[i]), glm(formula = resposta ~ base_modelo_rmna_amostra_train[,i],data = base_modelo_rmna_amostra_train ,family = binomial(link="logit")))
#assign(paste0("mod_",names_colunas[i]), lm(formula = as.numeric(resposta) ~ base_modelo_rmna_amostra_train[,i],data = base_modelo_rmna_amostra_train))
a = summary(get(paste0("mod_",names_colunas[i])))
base_testes =  data_frame(`Variáveis` = names_colunas[i],
Estimativa = round(a$coefficients[2,1],6),
`Erro-padrão` = round(a$coefficients[2,2],6),
`Estatística z` = round(a$coefficients[2,3],6),
`Valor-p` = round(a$coefficients[2,4],6),
Significante = ifelse(round(a$coefficients[2,4],6)>0.05,"Não","Sim"))
if(i == 2){
base_testes_fim = base_testes
}else{
base_testes_fim = rbind(base_testes_fim,base_testes)
}
}
a
View(base_testes_fim)
save(base_testes_fim,file = "Scripts/teste_reg_log_sim.Rdata")
knitr::opts_chunk$set(echo = TRUE)
options("scipen"=100, "digits"=4)
library(dplyr)
library(tidylog)
library(ggplot2)
library(ggthemes)
library(gridExtra)
library(plotly)
library(reshape2)
library(scales)
library(ggrepel)
library(knitr)
library(psych)
library(readr)
library(Hmisc)
library(forcats)
library(stringr)
library(lubridate)
library(tsibble)
library(sjstats)
library(questionr)
library(stats)
load("/Hitalo/Documents/case-fortBrasil/Scripts/teste_reg_log_sim.Rdata")
load("/Hitalo/Documents/case-fortBrasil/Scripts/teste_reg_log_sim.Rdata")
kable(base_testes_fim,digits = 4,format = "markdown",format.args = list(decimal.mark = ","), align = "l")
mod_mult_bestglm$call
# tabela dos modelos testados
bestmod$BestModels
save(bestmod$BestModels,file = "Scripts/bestglm.Rdata")
# tabela dos modelos testados
bestmod$BestModels
bestmod$BestModels
# tabela dos modelos testados
bm = bestmod$BestModels
save(bm,file = "Scripts/bestglm.Rdata")
load("/Hitalo/Documents/case-fortBrasil/Scripts/bestglm.Rdata")
load("/Hitalo/Documents/case-fortBrasil/Scripts/bestglm.Rdata")
kable(bm,digits = 4,format = "markdown",format.args = list(decimal.mark = ","), align = "l")
load("/Hitalo/Documents/case-fortBrasil/Scripts/bestglm.Rdata")
kable(bm,digits = 4,format = "markdown",format.args = list(decimal.mark = ","), align = "l")
hl = hoslem.test(mod_mult_bestglm$y,fitted(mod_mult_bestglm), g = 15)
hl
pdata_train <- predict(mod_mult_bestglm, newdata = base_modmult_fim_vif[,-1], type = "response")
confusionMatrix(table(data = as.numeric(pdata_train>0.5), reference = base_modmult_fim_vif$resposta),positive = '1')
save(cm,file = "Scripts/cm_train.Rdata")
load("/Hitalo/Documents/case-fortBrasil/Scripts/cm_train.Rdata")
load("/Hitalo/Documents/case-fortBrasil/Scripts/cm_train.Rdata")
#kable(,digits = 4,format = "markdown",format.args = list(decimal.mark = ","), align = "l")
cm_train
load("/Hitalo/Documents/case-fortBrasil/Scripts/cm_train.Rdata")
#kable(,digits = 4,format = "markdown",format.args = list(decimal.mark = ","), align = "l")
cm
pdata_test <- predict(mod_mult_bestglm, newdata = test[,-1], type = "response")
confusionMatrix(table(data = as.numeric(pdata_test>0.5), reference = test$resposta),positive = '1')
ks.test(pdata_train,pdata_test)
curva_roc = roc.curve(base_modmult_fim_vif$resposta,
mod_mult_bestglm$fitted.values,
ylab = "Taxa de verdadeiros positivos",
xlab = "Taxa de falsos positivos")
knitr::include_graphics("/Hitalo/Documents/case-fortBrasil/imagens/Roc.png")
curva_roc$auc
sum_modmult_bestglm
curva_roc = roc.curve(base_modmult_fim_vif$resposta,
mod_mult_bestglm$fitted.values,
ylab = "Taxa de verdadeiros positivos",
xlab = "Taxa de falsos positivos")
write.table(baseCompQ2_,file = "Bases/Q2_comp.csv",quote = F,row.names = F,col.names = T,dec = ",")
write.table(baseCompQ2_,file = "Bases/Q2_comp.csv",quote = F,row.names = F,col.names = T,dec = ",",sep = ";")
View(baseCompQ2_)
